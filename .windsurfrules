EzPay 프로젝트 최적화 개발 가이드

1. 개발 원칙

DRY (Don't Repeat Yourself): 중복 코드를 최소화합니다.

단일 책임 원칙: 컴포넌트와 함수는 단일 책임을 갖습니다.

모듈화: 기능별로 모듈화하여 유지보수를 용이하게 합니다.

안정성: TypeScript를 활용하여 모든 코드의 타입 안전성을 보장합니다.

일관성: 명확한 네이밍과 구조를 통해 일관성을 유지합니다.

2. 프로젝트 구조 (Next.js 기반)

src/
├── api/
│   ├── client.ts
│   └── [도메인].ts
├── app/
├── components/
│   ├── ui/ (Shadcn UI 확장)
│   ├── common/
│   └── [도메인]/
├── config/
├── db/
│   └── procedures/
├── hooks/
├── lib/
├── styles/
└── types/

3. 타입 시스템

타입 정의는 반드시 src/types 폴더에 작성합니다.

배럴 파일(index.ts)로 모든 타입을 관리합니다.

공통 타입(ApiResponse)은 common.ts에 정의합니다.

4. 컴포넌트 개발 (Shadcn UI)

모든 컴포넌트는 명확한 Props 타입을 정의합니다.

Shadcn UI는 확장 또는 래핑을 통해 커스터마이징하여 유지보수를 쉽게 합니다.

데이터 안정성을 위한 SafeWrapper 컴포넌트를 적극 활용합니다.

5. API 통합

docs 폴더기준으로 외부 api 를 호출 하는 문서를 따로 정리 획일화해주세요!.

DB에서 호출할 프로시저는 docs 폴더에 정리해주세요!.

src/api 폴더에 API 클라이언트를 작성합니다.

중앙화된 API 클라이언트(src/api/client.ts)를 사용하여 API 호출을 표준화합니다.

API 호출 시 에러 처리는 일관된 방식으로 진행하며, 로깅을 추가하여 추적성을 확보합니다.

6. 유틸리티 및 헬퍼 함수

데이터 처리 유틸리티 함수는 src/lib/typeUtils.ts에 작성합니다.

데이터 배열화, API 데이터 안전 추출, 상태별 카운트 함수 등을 적극 활용합니다.

7. 에러 방지 전략

데이터 접근 시 항상 배열 여부 및 null 검증을 수행합니다.

타입 가드를 사용하여 런타임 오류를 최소화합니다.

옵셔널 체이닝(?.)과 널 병합 연산자(??)를 적극 활용합니다.

8. 코드 스타일 가이드

파일당 주요 컴포넌트나 하나의 책임을 유지합니다.

라인 길이는 80~100자를 넘지 않으며, 들여쓰기는 2 스페이스로 합니다.

명확한 주석(JSDoc)을 통해 코드의 의도를 명시적으로 전달합니다.

9. MSSQL 데이터베이스 관리

테이블명은 PascalCase, 컬럼명은 첫 글자 대문자를 사용합니다.

저장 프로시저는 sp_동작대상 형식을 따릅니다 (Get, Create, Update, Delete).

모든 저장 프로시저는 IF EXISTS를 사용하여 재생성합니다.

데이터베이스 연결은 환경 변수를 활용하여 연결 풀로 관리합니다.

타입스크립트 인터페이스와 DB 프로시저의 입출력을 반드시 일치시킵니다.

10. 결론

이 가이드는 일관된 코드 품질, 유지보수의 용이성, 런타임 안정성을 보장하여 개발 효율을 극대화합니다.

모든 개발자는 이 가이드를 기준으로 작업을 수행하여 EzPay 프로젝트의 코드 일관성을 유지합니다.